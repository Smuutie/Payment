plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id "com.diffplug.spotless" version "6.20.0"
}

group = 'com.smuut'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:2.2.0"
    implementation "org.springdoc:springdoc-openapi-starter-common:2.2.0"
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed", "standardError"
        showExceptions true
        exceptionFormat "full"
    }

        jacoco {
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }

}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

tasks.check.dependsOn spotlessCheck

spotless {
    java {
        target '**/*.java'
        importOrder 'java', 'jakarta', 'org', 'com', ''
        removeUnusedImports()
        googleJavaFormat()
        toggleOffOn()
    }
}

jacocoTestReport {
    executionData test
    sourceSets  sourceSets.main
    dependsOn check
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }

}

jacocoTestCoverageVerification {
    executionData test
    sourceSets  sourceSets.main
    dependsOn check

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
        }
    }

}


defaultTasks 'clean', 'spotlessApply', 'bootRun'
